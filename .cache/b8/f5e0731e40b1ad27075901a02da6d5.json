{"id":"node_modules/@snap/camera-kit/lib/common/entries.js","dependencies":[{"name":"/Users/eneto/Lab/snap-rca-camkit-workshop/node_modules/@snap/camera-kit/lib/common/entries.js.map","includedInParent":true,"mtime":1710948721161},{"name":"/Users/eneto/Lab/snap-rca-camkit-workshop/package.json","includedInParent":true,"mtime":1710952305120},{"name":"/Users/eneto/Lab/snap-rca-camkit-workshop/node_modules/@snap/camera-kit/package.json","includedInParent":true,"mtime":1710948721086}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromEntries = exports.entries = void 0;\n// `Object.entries` does not use `keyof` types, so it loses type specificity. We'll fix this with a wrapper.\nconst entries = o => Object.entries(o);\n// `Object.fromEntries` similarly does not preserve key types.\nexports.entries = entries;\nconst fromEntries = entries => Object.fromEntries(entries);\nexports.fromEntries = fromEntries;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/common/entries.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":2,"column":7},"generated":{"line":8,"column":0}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":2,"column":13},"generated":{"line":8,"column":6}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":2,"column":20},"generated":{"line":8,"column":13}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":2,"column":72},"generated":{"line":8,"column":16}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":2,"column":76},"generated":{"line":8,"column":17}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":8,"column":21}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":10},"generated":{"line":8,"column":27}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":8,"column":28}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":18},"generated":{"line":8,"column":35}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":19},"generated":{"line":8,"column":36}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":20},"generated":{"line":8,"column":37}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":3,"column":53},"generated":{"line":8,"column":38}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":9,"column":0}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":7}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":8}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":15}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":18}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":25}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":6,"column":7},"generated":{"line":11,"column":0}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":6,"column":13},"generated":{"line":11,"column":6}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":6,"column":24},"generated":{"line":11,"column":17}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":6,"column":67},"generated":{"line":11,"column":20}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":6,"column":97},"generated":{"line":11,"column":27}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":4},"generated":{"line":11,"column":31}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":10},"generated":{"line":11,"column":37}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":11},"generated":{"line":11,"column":38}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":22},"generated":{"line":11,"column":49}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":23},"generated":{"line":11,"column":50}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":30},"generated":{"line":11,"column":57}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":47},"generated":{"line":11,"column":58}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":48},"generated":{"line":12,"column":0}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":48},"generated":{"line":12,"column":7}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":48},"generated":{"line":12,"column":8}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":48},"generated":{"line":12,"column":19}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":48},"generated":{"line":12,"column":22}},{"source":"../../src/common/entries.ts","name":null,"original":{"line":7,"column":48},"generated":{"line":12,"column":33}}],"sources":{"../../src/common/entries.ts":"// `Object.entries` does not use `keyof` types, so it loses type specificity. We'll fix this with a wrapper.\nexport const entries = <T extends { [s: string]: U } | ArrayLike<U>, U>(o: T): Array<[keyof T, T[keyof T]]> =>\n    Object.entries(o) as Array<[keyof T, T[keyof T]]>;\n\n// `Object.fromEntries` similarly does not preserve key types.\nexport const fromEntries = <K extends string | number | symbol, V>(entries: ReadonlyArray<[K, V]>): Record<K, V> =>\n    Object.fromEntries(entries) as Record<K, V>;\n"},"lineCount":null}},"error":null,"hash":"18bdad046511dd919d2c12ede2168e86","cacheData":{"env":{}}}